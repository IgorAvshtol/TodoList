{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","state/tasks-reducer.ts","state/todolists-reducer.ts","App.tsx","state/store.tsx","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","placeholder","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Todolist","changeTodolistTitle","id","removeTodolist","Delete","addTask","tasks","map","t","className","isDone","Checkbox","checked","newIsDoneValue","changeTaskStatus","newValue","changeTaskTitle","removeTask","Button","filter","changeFilter","initialState","c","v1","App","dispatch","useDispatch","todolists","useSelector","state","todolistId","taskId","type","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","changeTodolistFilterAC","changeTodolistTitleAC","AppBar","position","Toolbar","Container","fixed","Grid","container","style","padding","addTodolistAC","spacing","tl","allTodolistTasks","tasksForTodolist","item","Paper","rootReducer","combineReducers","action","stateCopy","filteredTasks","newTask","newTasks","task","find","todolist","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"2OAQO,SAASA,EAAYC,GAA8B,IAAD,EAE7BC,mBAAS,IAFoB,mBAEhDC,EAFgD,KAEzCC,EAFyC,OAG7BF,mBAAwB,MAHK,mBAGhDG,EAHgD,KAGzCC,EAHyC,KAK/CC,EAAU,WACS,KAAjBJ,EAAMK,QACNP,EAAMM,QAAQJ,GACdC,EAAS,KAETE,EAAS,sBAgBjB,OAAO,gCACH,cAACG,EAAA,EAAD,CAAWC,QAAQ,WACRC,YAAa,kBACbN,QAASA,EACTO,MAAOT,EACPU,SAjBS,SAACC,GACrBV,EAASU,EAAEC,cAAcH,QAiBdI,WAdW,SAACF,GACvBR,EAAS,MACU,KAAfQ,EAAEG,UACFV,KAYOW,MAAM,QACNC,WAAYd,IAEvB,cAACe,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAASf,EAArC,SACI,cAACgB,EAAA,EAAD,SCrCL,SAASC,EAAavB,GAA+B,IAAD,EACzBC,oBAAS,GADgB,mBAClDuB,EADkD,KACxCC,EADwC,OAE/BxB,mBAASD,EAAMW,OAFgB,mBAElDT,EAFkD,KAE3CC,EAF2C,KAgBvD,OAAOqB,EACE,cAAChB,EAAA,EAAD,CAAWC,QAAQ,WACRE,MAAOT,EAAOU,SANd,SAACC,GACjBV,EAASU,EAAEC,cAAcH,QAK4Be,WAAS,EAACC,OAV1C,WACrBF,GAAY,GACZzB,EAAMY,SAASV,MASb,sBAAM0B,cAfa,WACrBH,GAAY,GACZtB,EAASH,EAAMW,QAab,SAAwCX,EAAMW,Q,+BCAjD,SAASkB,EAAS7B,GAgBrB,OAAO,gCACH,mCAAK,cAACuB,EAAD,CAAcZ,MAAOX,EAAME,MAAOU,SATf,SAACV,GACzBF,EAAM8B,oBAAoB9B,EAAM+B,GAAI7B,MAShC,cAACiB,EAAA,EAAD,CAAYE,QAbG,WACnBrB,EAAMgC,eAAehC,EAAM+B,KAYvB,SACI,cAACE,EAAA,EAAD,SAGR,cAAClC,EAAD,CAAaO,QArBD,SAACJ,GACbF,EAAMkC,QAAQhC,EAAOF,EAAM+B,OAqB3B,8BAEQ/B,EAAMmC,MAAMC,KAAI,SAAAC,GAWZ,OAAO,sBAAgBC,UAAWD,EAAEE,OAAS,UAAY,GAAlD,UACH,cAACC,EAAA,EAAD,CACIC,QAASJ,EAAEE,OACXnB,MAAM,UACNR,SAbgB,SAACC,GACrB,IAAI6B,EAAiB7B,EAAEC,cAAc2B,QACrCzC,EAAM2C,iBAAiBN,EAAEN,GAAIW,EAAgB1C,EAAM+B,OAcnD,cAACR,EAAD,CAAcZ,MAAO0B,EAAEnC,MAAOU,SAZL,SAACgC,GAC1B5C,EAAM6C,gBAAgBR,EAAEN,GAAIa,EAAU5C,EAAM+B,OAY5C,cAACZ,EAAA,EAAD,CAAYE,QAlBO,kBAAMrB,EAAM8C,WAAWT,EAAEN,GAAI/B,EAAM+B,KAkBtD,SACI,cAACE,EAAA,EAAD,QATSI,EAAEN,SAe/B,gCACI,cAACgB,EAAA,EAAD,CAAQtC,QAA0B,QAAjBT,EAAMgD,OAAmB,WAAa,OAC/C3B,QAzCU,kBAAMrB,EAAMiD,aAAa,MAAOjD,EAAM+B,KA0ChDX,MAAO,UAFf,iBAKA,cAAC2B,EAAA,EAAD,CAAQtC,QAA0B,WAAjBT,EAAMgD,OAAsB,WAAa,OAClD3B,QA7Ca,kBAAMrB,EAAMiD,aAAa,SAAUjD,EAAM+B,KA8CtDX,MAAO,UAFf,oBAIA,cAAC2B,EAAA,EAAD,CAAQtC,QAA0B,cAAjBT,EAAMgD,OAAyB,WAAa,OACrD3B,QAhDgB,kBAAMrB,EAAMiD,aAAa,YAAajD,EAAM+B,KAiD5DX,MAAO,YAFf,6B,gFCxDN8B,EAA+B,CACjCC,EAAG,ICPDD,GAHmBE,eACAA,eAEiB,IC0F3BC,MAzFf,WACI,IAAMC,EAAWC,cACXC,EAAYC,aAAmD,SAAAC,GAAK,OAAIA,EAAMF,aAC9ErB,EAAQsB,aAA8C,SAAAC,GAAK,OAAIA,EAAMvB,SAG3E,SAASW,EAAWf,EAAY4B,GAC5BL,EFuDoB,SAACM,EAAgBD,GACzC,MAAO,CAACE,KAAM,cAAeF,aAAYC,UExD5BE,CAAa/B,EAAI4B,IAG9B,SAASzB,EAAQhC,EAAeyD,GAC5BL,EFsDiB,SAACpD,EAAeyD,GACrC,MAAO,CAACE,KAAM,WAAY3D,QAAOyD,cEvDpBI,CAAU7D,EAAOyD,IAG9B,SAASK,EAAajC,EAAYQ,EAAiBoB,GAC/CL,EFqD0B,SAACM,EACArB,EACAoB,GAC/B,MAAO,CAACE,KAAM,qBAAsBtB,SAAQoB,aAAYC,UExD3CK,CAAmBlC,EAAIQ,EAAQoB,IAG5C,SAASd,EAAgBd,EAAYmC,EAAkBP,GACnDL,EFsDyB,SAACM,EACA1D,EACAyD,GAC9B,MAAO,CAACE,KAAM,oBAAqB3D,QAAOyD,aAAYC,UEzDzCO,CAAkBpC,EAAImC,EAAUP,IAI7C,SAASV,EAAatC,EAAyBgD,GAC3CL,EDa8B,SAAEN,EAA0BW,GAC9D,MAAO,CAAEE,KAAM,yBAA0Bb,OAAQA,EAAQjB,GAAI4B,GCdhDS,CAAuBzD,EAAOgD,IAG3C,SAAS3B,EAAeD,GACpBuB,EDCG,CAAEO,KAAM,kBAAmB9B,GCDJA,IAG9B,SAASD,EAAoBC,EAAY7B,GACrCoD,EDE6B,SAACK,EAAoBzD,GACtD,MAAO,CAAE2D,KAAM,wBAAyB3D,MAAOA,EAAO6B,GAAI4B,GCH7CU,CAAsBtC,EAAI7B,IAOvC,OACI,sBAAKoC,UAAU,MAAf,UACI,cAACgC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,cAACC,EAAA,EAAD,UACI,6CAGR,eAACC,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACI,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,MAAO,CAACC,QAAS,QAAjC,SACI,cAAC/E,EAAD,CAAaO,QAb7B,SAAqBJ,GACjBoD,EDLqB,SAACpD,GAC1B,MAAO,CAAE2D,KAAM,eAAgB3D,QAAOyD,WAAYP,gBCIrC2B,CAAc7E,SAcf,cAACyE,EAAA,EAAD,CAAMC,WAAS,EAACI,QAAS,EAAzB,SAEQxB,EAAUpB,KAAI,SAAA6C,GACV,IAAIC,EAAmB/C,EAAM8C,EAAGlD,IAC5BoD,EAAmBD,EASvB,MAPkB,WAAdD,EAAGjC,SACHmC,EAAmBD,EAAiBlC,QAAO,SAAAX,GAAC,OAAiB,IAAbA,EAAEE,WAEpC,cAAd0C,EAAGjC,SACHmC,EAAmBD,EAAiBlC,QAAO,SAAAX,GAAC,OAAiB,IAAbA,EAAEE,WAG/C,cAACoC,EAAA,EAAD,CAAMS,MAAI,EAAV,SACH,cAACC,EAAA,EAAD,CAAOR,MAAO,CAACC,QAAS,QAAxB,SACI,cAACjD,EAAD,CAEIE,GAAIkD,EAAGlD,GACP7B,MAAO+E,EAAG/E,MACViC,MAAOgD,EACPrC,WAAYA,EACZG,aAAcA,EACdf,QAASA,EACTS,iBAAkBqB,EAClBhB,OAAQiC,EAAGjC,OACXhB,eAAgBA,EAChBa,gBAAiBA,EACjBf,oBAAqBA,GAXhBmD,EAAGlD,oB,QCxF1CuD,EAAcC,YAAgB,CAChCpD,MH8BwB,WAAgF,IAA/EuB,EAA8E,uDAAtDR,EAAcsC,EAAwC,uCACvG,OAAQA,EAAO3B,MACX,IAAK,cACD,IAAM4B,EAAS,eAAO/B,GAChBvB,EAAQuB,EAAM8B,EAAO7B,YACrB+B,EAAgBvD,EAAMa,QAAO,SAAAX,GAAC,OAAIA,EAAEN,KAAOyD,EAAO5B,UAExD,OADA6B,EAAUD,EAAO7B,YAAc+B,EACxBD,EAEX,IAAK,WACD,IAAMA,EAAS,eAAO/B,GAChBvB,EAAQsD,EAAUD,EAAO7B,YACzBgC,EAAU,CAAC5D,GAAIqB,eAAMlD,MAAOsF,EAAOtF,MAAOqC,QAAQ,GAClDqD,EAAQ,CAAID,GAAJ,mBAAgBxD,IAE9B,OADAsD,EAAUD,EAAO7B,YAAciC,EACxBH,EAEX,IAAK,qBACD,IAAMA,EAAS,eAAO/B,GAClBvB,EAAQsD,EAAUD,EAAO7B,YACzBkC,EAAO1D,EAAM2D,MAAK,SAAAzD,GAAC,OAAIA,EAAEN,KAAOyD,EAAO5B,UAI3C,OAHIiC,IACAA,EAAKtD,OAASiD,EAAOjD,QAElBkD,EAGX,IAAK,oBACD,IAAMA,EAAS,eAAO/B,GAClBvB,EAAQsD,EAAUD,EAAO7B,YACzBkC,EAAO1D,EAAM2D,MAAK,SAAAzD,GAAC,OAAIA,EAAEN,KAAOyD,EAAO5B,UAI3C,OAHIiC,IACAA,EAAK3F,MAAQsF,EAAOtF,OAEjBuF,EAEX,IAAK,eACD,IAAMA,EAAS,eAAO/B,GAItB,OAFA+B,EAAUD,EAAO7B,YAAc,GAExB8B,EAEX,IAAK,kBACD,IAAMA,EAAS,eAAO/B,GAEtB,cADO+B,EAAUD,EAAOzD,IACjB0D,EAEX,QACI,OAAO/B,IG9EfF,UFuB4B,WAA0F,IAAzFE,EAAwF,uDAA3DR,EAAcsC,EAA6C,uCACrH,OAAQA,EAAO3B,MACX,IAAK,kBACD,OAAOH,EAAMV,QAAO,SAAAiC,GAAE,OAAIA,EAAGlD,IAAMyD,EAAOzD,MAC9C,IAAK,eACD,MAAM,GAAN,mBAAW2B,GAAX,CAAkB,CAAC3B,GAAIyD,EAAO7B,WAAYzD,MAAOsF,EAAOtF,MAAO8C,OAAQ,SAC3E,IAAK,wBACD,IAAM+C,EAAWrC,EAAMoC,MAAK,SAAAb,GAAE,OAAIA,EAAGlD,KAAOyD,EAAOzD,MAInD,OAHIgE,IACAA,EAAS7F,MAAQsF,EAAOtF,OAErB,YAAIwD,GAEf,IAAK,yBACD,IAAMqC,EAAWrC,EAAMoC,MAAK,SAAAb,GAAE,OAAIA,EAAGlD,KAAOyD,EAAOzD,MAInD,OAHIgE,IACAA,EAAS/C,OAASwC,EAAOxC,QAEtB,YAAIU,GAEf,QACI,OAAOA,MEzCNsC,EAAQC,YAAYX,GCHjCY,IAASC,OAAO,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SACR,cAAC,EAAD,MAEFI,SAASC,eAAe,W","file":"static/js/main.33f5c037.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   placeholder={'Enter list name'}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField variant=\"outlined\"\r\n                        value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id);\r\n    }\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id);\r\n    }\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    return <div>\r\n        <h3> <EditableSpan value={props.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n                    const onTitleChangeHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.id);\r\n                    }\r\n\r\n\r\n                    return <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <Checkbox\r\n                            checked={t.isDone}\r\n                            color=\"primary\"\r\n                            onChange={onChangeHandler}\r\n                        />\r\n\r\n                        <EditableSpan value={t.title} onChange={onTitleChangeHandler} />\r\n                        <IconButton onClick={onClickHandler}>\r\n                            <Delete />\r\n                        </IconButton>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import {FilterValuesType, TasksStateType, TodolistType} from '../App';\r\nimport {v1} from 'uuid';\r\nimport {AddTodolistActionType, RemoveTodolistActionType, todolistId1, todolistId2} from './todolists-reducer';\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    todolistId: string\r\n    taskId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    todolistId: string\r\n    isDone: boolean\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType | ChangeTaskTitleActionType\r\n    | AddTodolistActionType | RemoveTodolistActionType;\r\n\r\n\r\nconst initialState: TasksStateType = {\r\n    c: []\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state};\r\n            const tasks = state[action.todolistId];\r\n            const filteredTasks = tasks.filter(t => t.id !== action.taskId)\r\n            stateCopy[action.todolistId] = filteredTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state};\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTask = {id: v1(), title: action.title, isDone: false};\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            const stateCopy = {...state};\r\n            let tasks = stateCopy[action.todolistId];\r\n            let task = tasks.find(t => t.id === action.taskId);\r\n            if (task) {\r\n                task.isDone = action.isDone;\r\n            }\r\n            return stateCopy;\r\n\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            const stateCopy = {...state};\r\n            let tasks = stateCopy[action.todolistId];\r\n            let task = tasks.find(t => t.id === action.taskId);\r\n            if (task) {\r\n                task.title = action.title;\r\n            }\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const stateCopy = {...state};\r\n\r\n            stateCopy[action.todolistId] = [];\r\n\r\n            return stateCopy;\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state};\r\n            delete stateCopy[action.id]\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', todolistId, taskId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string,\r\n                                   isDone: boolean,\r\n                                   todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', isDone, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string,\r\n                                  title: string,\r\n                                  todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\n\r\n","import {FilterValuesType, TodolistType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport let todolistId1 = v1();\r\nexport let todolistId2 = v1();\r\n\r\nconst initialState: Array<TodolistType> = []\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType | ChangeTodolistTitleActionType | ChangeTodolistFilterActionType;\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [...state, {id: action.todolistId, title: action.title, filter: \"all\"}]\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state];\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', title: title, id: todolistId}\r\n}\r\nexport const changeTodolistFilterAC = ( filter: FilterValuesType, todolistId: string): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', filter: filter, id: todolistId}\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Container, Grid, Paper, Toolbar} from '@material-ui/core';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC\r\n} from \"./state/todolists-reducer\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        dispatch(removeTaskAC(id, todolistId))\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        dispatch(addTaskAC(title, todolistId))\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        dispatch(changeTaskStatusAC(id, isDone, todolistId))\r\n    }\r\n\r\n    function changeTaskTitle(id: string, newTitle: string, todolistId: string) {\r\n        dispatch(changeTaskTitleAC(id, newTitle, todolistId))\r\n    }\r\n\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        dispatch(changeTodolistFilterAC(value, todolistId))\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        dispatch(removeTodolistAC(id))\r\n    }\r\n\r\n    function changeTodolistTitle(id: string, title: string) {\r\n        dispatch(changeTodolistTitleAC(id, title))\r\n    }\r\n\r\n    function addTodolist(title: string) {\r\n        dispatch(addTodolistAC(title))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <p>TodoList</p>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                            }\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer);\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(<Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}